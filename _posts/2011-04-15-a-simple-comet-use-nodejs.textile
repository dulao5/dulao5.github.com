---
layout: post
title: 使用nodejs搭建最简单的comet原型
category: note
---

Comet, 据<a href="http://www.ibm.com/developerworks/cn/web/wa-lo-comet/">IBM这篇文章</a>介绍,是<i>基于HTTP长连接的“服务器推”技术</i>. 和AJAX类似, 这是一种改善WEB用户体验的通讯技术. 其实早在CGI盛行的时代, 有种叫做"Server-Push"的技术, 和Comet本质是一回事, 都是基于长连接来实现. Server-Push更具体, 强调使用multipart/x-mixed-replace的Conent-Type技巧, 使得服务器能替换浏览器的内容. Comet包含面更广泛, 只要是有长连接和HTTP chunked的实现, 都算作其中. <a href="http://www.josephj.com/entry.php?id=358">这篇文章</a>详细介绍了Comet的各种形态,值得一读.

Comet虽然能让浏览器达到及时的响应, 但是由于基于长连接实现, 服务器成本很高. 最近这种技术之所以火起来, 主要还是牛人们探索到了各种降低服务器成本的方法. <a href="http://amix.dk/blog/label/25#AJAX-and-comet">这个叫amix的家伙</a>对此有较多的研究.

<a href="http://nodejs.org/">nodejs</a>号称Evented I/O for V8 JavaScript, 是基于<a href="http://code.google.com/p/v8/">V8</a>的一款神器, 让我们可以使用javascript轻松进行服务器端编程.

我用一下午的时间, 使用nodejs搞了一个简单的不能再简单的Comet原型. 在这个demo里面, 我假定使用iframe实现Comet, 但是忽略了iframe的父窗口和客户端js库, 只考虑服务器如何将HTTP chunked push到客户端.

我定义了一种Comet资源: http://{host}/{pathname}?[{query_string}] . 其中{pathname}直接当作客户端id来使用. {query_string}用来做消息内容. 这样, 原型就简化成了两种操作:
 * HTTP GET : <i>http://{host}/{pathname}</i>   用来模拟iframe长连接, 不断接收到新数据.
 * HTTP PUT : <i>http://{host}/{pathname}?{query_string} </i> 用来模拟业务操作, 直接将{query_string}当作数据投递到上面的长连接里面.

测试方法: 
我们在第一个终端模拟iframe, 输入命令, 观察收到的数据:
<pre>
telnet 127.0.0.1 18124
GET /mymessages HTTP/1.1

HTTP/1.1 200 OK
content-type: text/plain
Connection: keep-alive
Transfer-Encoding: chunked
</pre>

我们在第二个终端输入curl -X PUT命令, 模拟各种业务消息:
<pre>
curl -X PUT "http://127.0.0.1:18124/mymessages?a=1&b=2&c=3"
curl -X PUT "http://127.0.0.1:18124/mymessages?a=4&b=5&c=6"
</pre>

好, 主角登场, 用nodejs实现最简单的Comet:

{% highlight javascript %}

global.messages = {
	//'resid':[]
};

var char500 = (function(){ var i=0; var arr = []; for(i=0; i<500; i++) { arr.push( ' ' ); } return arr.join(''); })();

var http_method_funs = {
	'GET': function(resid, data, request, response) {
		if(global.messages[resid] == undefined) {
			global.messages[resid] = [];
		}

		response.writeHead(200, {'content-type': 'text/plain'});

		var interval = setInterval(myoutput, 500 );
		response.connection.on('end', function(){
				console.log("GET\t" + resid + "\tclosed");
				clearInterval(interval);
				});

		myoutput();

		function myoutput(){

			var msgs = global.messages[resid];
			if(msgs.length){
				var str = msgs.join("\n\n\n") + "\n\n\n";
				str = (str.length < 500 ) ? ( str + char500 ) : str; //for MTU
				response.write(str);
				global.messages[resid] = [];
			}

		}
	},

	'PUT': function(resid, data , request, response) {
		if(global.messages[resid] == undefined) {
			global.messages[resid] = [];
		}

		global.messages[resid].push(data);
		console.log(global.messages);

		response.writeHead(200, {'content-type': 'text/plain'});
		response.end( 'ok\n');
	},
};
//method function 

require('http').createServer(function (request, response) {

		var urlinfo = require('url').parse(request.url);
		var resid = urlinfo['pathname'];
		var data = (urlinfo['query']) ? urlinfo['query'] : 0 ;
		var method = request.method;

		console.log(method + "\t" + resid );

		if(typeof http_method_funs[method] == 'function') {
			http_method_funs[method].call(null, resid, data, request, response);
		}
		else {
			response.writeHead(400);
			response.end("unsupport method\n");
		}

		}).listen(18124);
console.log('server running at http://127.0.0.1:18124/');
{% endhighlight %}

可以看到, 用javascript event的风格写服务器, 简直是明白如话, 散文那样自然.
我用global.messages对象来存储消息, key是resid(上面说的客户端id), value是个array, 里面存储客户端收到的messages.
我为GET/PUT两种操作分别实现两个函数. 
PUT函数, 收到请求就将query_string当作message存到对应resid的array中, 然后断开HTTP连接.
GET函数, 收到请求就启动一个定时器, 轮询global.messages里面自己的消息队列(array). 如果遇到数据则在HTTP response输出http chunked. HTTP连接不主动关闭, 但如果被异常关闭则清除定时器对象.

就这么一个简单功能, 如果用C和select来开发, 那么一个全局的客户端句柄队列是免不了要实现的, 当io事件到来时, 如何恢复之前中断的上下文,进行正确的io操作, 是一件头疼的事情. 
而我们看myoutput定时器函数. 局部变量resid/response就在函数的定义环境内, 所以函数被执行时, 很自然就使用这些上下文信息. 相比来说, C里面的客户端句柄队列设计就太突兀了.

javascript通过函数式的风格, 以及闭包的特性, 轻而易举的完成了一个非阻塞服务器. 如果说libevent是通过库来实现了事件的封装, 那么nodejs所宣称的"Evented I/O for V8 JavaScript", 则是借javascript优雅特性获得自然的收获.

