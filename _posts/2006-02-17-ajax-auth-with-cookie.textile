---
layout: post
title: ajax的用户身份验证（以及ajax和soap的区别）
category: front-end
---

<!--startfragment -->


<p class="MsoNormal" style="margin: 0cm 0cm 0pt 42pt; text-indent: -21pt;">*<span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">XmlHTTPRequest组件有这样的行为：</span>*


*
*





<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">1）和服务器会话时，它直接将用户现有的cookie信息加入到会话的http header中。</span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">2）如果服务器发生了跳转,例如服务器返回如下信息：</span>











<table class="MsoNormalTable" style="margin: auto auto auto 8.88pt; border-collapse: collapse;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr style="height: 15.75pt;">
<td style="padding: 0cm 5.4pt; width: 342pt; height: 15.75pt; background-color: transparent;" width="456" valign="top">
<p class="MsoNormal" style="margin: 0cm 0cm 0pt; text-align: left;"><span style="font-size: 8.5pt; font-family: 'Courier New';" lang="EN-US">HTTP/1.1 302 Found</span>








<p class="MsoNormal" style="margin: 0cm 0cm 0pt; text-align: left;"><span style="font-size: 8.5pt; font-family: 'Courier New';" lang="EN-US">Date: Thu, </span><span style="font-size: 8.5pt; font-family: 'Courier New';" lang="EN-US">01 Dec 2005</span><span style="font-size: 8.5pt; font-family: 'Courier New';" lang="EN-US">&nbsp;</span><span style="font-size: 8.5pt; font-family: 'Courier New';" lang="EN-US">02:00:24 GMT</span><span style="font-size: 8.5pt; font-family: 'Courier New';" lang="EN-US">&nbsp;</span>








<p class="MsoNormal" style="margin: 0cm 0cm 0pt; text-align: left;"><span style="font-size: 8.5pt; font-family: 'Courier New';" lang="EN-US">Server: Apache/1.3.33 (Unix) PHP/4.4.0 mod_ssl/2.8.24 OpenSSL/0.9.7e</span>








<p class="MsoNormal" style="margin: 0cm 0cm 0pt; text-align: left;"><span style="font-size: 8.5pt; font-family: 'Courier New';" lang="EN-US">X-Powered-By: PHP/4.4.0</span>








<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span style="font-size: 8.5pt; font-family: 'Courier New';" lang="EN-US">Location: testpost.php</span><span lang="EN-US">&nbsp;</span>









|

</tbody>

<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;">那么<span lang="EN-US">XmlHTTPRequest的行为将依赖用户浏览器。一般来说XmlHTTPRequest不能得到这个消息头，也不能得到http 302的状态码，而是直接继续访问跳转页面</span></span><span style="font-size: 8.5pt; font-family: 'Courier New';" lang="EN-US">Location: testpost.php</span><span style="font-size: 8.5pt; font-family: &#23435;&#20307;;">，</span><span style="font-size: 12pt; font-family: &#23435;&#20307;;">如果访问成功，直接返回<span lang="EN-US">http状态码200,并读取得到此页面的文本输出。</span></span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">Ie中没有相关配置，只会进行上述行为。</span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">Opera中有&ldquo;是否允许自动重定向&rdquo;设置。如果用户不允许自动重定向则xmlHTTPRequest能接收到302信息，xmlHttpRequest不会继续跳转。</span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">Firefox中有一个选项network.http.redirection-limit(20)，这个选项是用户所允许的重定向次数。如果设置成0，那么很遗憾，XmlHTTPRequest接收不到任何信息。</span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; color: red; font-family: &#23435;&#20307;;">『演示代码』</span>





<table class="MsoNormalTable" style="margin: auto auto auto 8.88pt; border-collapse: collapse;" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr style="height: 15pt;">
<td style="padding: 0cm 5.4pt; width: 351pt; height: 15pt; background-color: transparent;" width="468" valign="top">
<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US">&nbsp;</span>





&nbsp;



<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US">var x = sajax_init_object();</span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US">x.open("GET","testjump.php",true);</span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US">function _callback() { <span>&nbsp;</span><span>&nbsp;</span>if (x.readyState != 4)return;</span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><span>&nbsp;</span>sajax_debug("<pre>received " </span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><span>&nbsp;</span>+ x.responseText </span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><span>&nbsp;</span>+"\nstatus:"</span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><span>&nbsp;</span>+x.status+"</pre>");</span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US"><span>&nbsp;</span>alert("</span><span style="font-family: &#23435;&#20307;;">调用结束</span><span lang="EN-US">");</span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US">}</span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US">if ("[XMLHttpRequest]"==x.constructor){<span>&nbsp;</span>x.onload = _callback ;}</span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US">else{<span>&nbsp;</span>x.onreadystatechange = _callback ;}</span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US">x.send("");</span>


<p class="MsoNormal" style="margin: 0cm 0cm 0pt;"><span lang="EN-US">&nbsp;</span>









|

</tbody>

<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">&nbsp;</span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;">&nbsp;</span>&nbsp;


<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;">所以我们可以得出结论：<span lang="EN-US">&nbsp;</span></span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">1）在dhtml的环境里，ajax的身份验证和用户浏览器是等同的，ajax依赖的XmlHTTPRequest和服务器的会话http header会自动包含浏览器中的cookie.</span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;">所以从传统网站过渡到<span lang="EN-US">ajax，在用户身份验证上不必花费太大力气。</span></span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">2）另外，XmlHTTPRequest组件更像浏览器提供给用户的一个组件，而不像一个纯粹的socket组件，它包装了一些行为，例如上面提到的它将用户cookie自动加入http header到请求信息中，再如刚才提到的它自动读取服务器uri发生跳转以后的页面。</span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;">结论：在使用<span lang="EN-US">ajax做web应用的时候，基本上和传统web程序身份验证方式相同。只是不能使用自动重定向的方法让没有cookie的用户跳转到登录页面。比较好的方案是使用错误处理的方式，当用户还没有登录时向客户端返回一个错误码，客户端js分析错误码进行跳转。</span></span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">&nbsp;</span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;" dir="ltr">*<span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">SOAP的用户身份验证：</span>*


*
*





<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;">我见过的<span lang="EN-US">SOAP身份验证有两种，一种是每次请求时，将用户名和密码放到http的header中，这是HTTP标准协议中对于http header的应用，当然，这是明文的，如果需要加密的话，只能使用ssl,而每次请求都使用ssl显然会影响速度。另一种是使用session,例如MS DotNet WebService有它的session机制 。但是如果用php实现这些，恐怕要花费很大精力。</span></span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;" lang="EN-US">&nbsp;</span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;">*<span style="font-size: 12pt; font-family: &#23435;&#20307;;">结论</span>*<span style="font-size: 12pt; font-family: &#23435;&#20307;;">：<span lang="EN-US">ajax的服务端更像一个简单的rpc,虽然和soap有些类似，但是实现一个支持ajax的服务端是很简单的，但是要实现soap就复杂的多了。</span></span>








<p class="MsoNormal" style="margin-top: 0cm; margin-bottom: 0pt; text-indent: 21pt; margin-right: 0cm;"><span style="font-size: 12pt; font-family: &#23435;&#20307;;">但是从业务逻辑的观点来看，<span lang="EN-US">ajax的服务端可以做到和soap的服务端类似，成为一种专门提供业务逻辑操作的远程调用接口。</span></span>







